/**
 * Copyright (C) Key Bridge Global LLC and/or its affiliates.
 * <p/>
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 * <p/>
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * <p/>
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 */
package info.wsdba.peering.soap.client.keybridge;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;
import javax.xml.namespace.QName;
import javax.xml.ws.*;
import javax.xml.ws.handler.Handler;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.6-1b01 Generated
 * source version: 2.2
 * <p/>
 */
@WebServiceClient(name = "peering", targetNamespace = "http://whitespace.keybridgeglobal.com/peering/wsdba")
public class Peering extends Service {

  private final static URL PEERING_WSDL_LOCATION;
  private final static WebServiceException PEERING_EXCEPTION;
  private final static QName PEERING_QNAME = new QName("http://whitespace.keybridgeglobal.com/peering/wsdba", "peering");

  static {
    URL url = null;
    WebServiceException e = null;
    try {
      url = new URL("http://keybridgeglobal.com/peering/WSDBASoapService?wsdl");
    } catch (MalformedURLException ex) {
      e = new WebServiceException(ex);
    }
    PEERING_WSDL_LOCATION = url;
    PEERING_EXCEPTION = e;
  }

  public Peering() {
    super(__getWsdlLocation(), PEERING_QNAME);
  }

  public Peering(WebServiceFeature... features) {
    super(__getWsdlLocation(), PEERING_QNAME, features);
  }

  public Peering(URL wsdlLocation) {
    super(wsdlLocation, PEERING_QNAME);
  }

  public Peering(URL wsdlLocation, WebServiceFeature... features) {
    super(wsdlLocation, PEERING_QNAME, features);
  }

  public Peering(URL wsdlLocation, QName serviceName) {
    super(wsdlLocation, serviceName);
  }

  public Peering(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
    super(wsdlLocation, serviceName, features);
  }

  /**
   *
   * @return returns WSDBASoapService
   */
  @WebEndpoint(name = "WSpaces_WS_Service")
  public WSDBASoapService getWSpacesWSService() {
    WSDBASoapService service = super.getPort(new QName("http://whitespace.keybridgeglobal.com/peering/wsdba", "WSpaces_WS_Service"), WSDBASoapService.class);
    initializeBinding(service);
    return service;
  }

  /**
   *
   * @param features A list of {@link javax.xml.ws.WebServiceFeature} to
   *                 configure on the proxy. Supported features not in * * * *
   *                 the <code>features</code> parameter will have their default
   *                 values.
   * @return returns WSDBASoapService
   */
  @WebEndpoint(name = "WSpaces_WS_Service")
  public WSDBASoapService getWSpacesWSService(WebServiceFeature... features) {
    WSDBASoapService service = super.getPort(new QName("http://whitespace.keybridgeglobal.com/peering/wsdba", "WSpaces_WS_Service"), WSDBASoapService.class, features);
    initializeBinding(service);
    return service;
  }

  /**
   * Internal method to add console logging to the SOAP client.
   * <p/>
   * The SoapClientLogget class logs all SOAP Query and Response messages to the
   * console.
   */
  private void initializeBinding(WSDBASoapService service) {
    BindingProvider bindingProvider = (BindingProvider) service;
    List<Handler> handlerChain = bindingProvider.getBinding().getHandlerChain();
    /**
     * Add the LOGGER
     */
    handlerChain.add(new SoapClientLogger());
    bindingProvider.getBinding().setHandlerChain(handlerChain);
  }

  private static URL __getWsdlLocation() {
    if (PEERING_EXCEPTION != null) {
      throw PEERING_EXCEPTION;
    }
    return PEERING_WSDL_LOCATION;
  }
}
